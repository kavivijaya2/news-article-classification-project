# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yhgBmNzZmpNe148D8KwiAstccXFSTAit
"""

# app.py

import streamlit as st
import pandas as pd
import re
import nltk
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
import joblib

# Download NLTK data (run once)
nltk.download('stopwords')
nltk.download('wordnet')
nltk.download('omw-1.4')

# Preprocessing functions
stop_words = set(stopwords.words('english'))
lemmatizer = WordNetLemmatizer()

def preprocess_text(text):
    text = re.sub('[^a-zA-Z]', ' ', text)
    text = text.lower()
    tokens = [lemmatizer.lemmatize(word) for word in text.split() if word not in stop_words]
    return ' '.join(tokens)

# Load or train model (For demo: train with small dataset)
def train_and_save_model():
    data = {
        'text': [
            "The economy is doing well according to the latest report.",
            "Breaking news: celebrity caught in scandal!",
            "The government has announced a new policy to boost education.",
            "Aliens have landed, claims anonymous source.",
            "Scientists confirm climate change is accelerating."
        ],
        'label': ["real", "fake", "real", "fake", "real"]
    }
    df = pd.DataFrame(data)
    df['cleaned_text'] = df['text'].apply(preprocess_text)
    vectorizer = TfidfVectorizer()
    X = vectorizer.fit_transform(df['cleaned_text'])
    y = df['label']
    model = LogisticRegression()
    model.fit(X, y)
    joblib.dump(model, 'news_classifier_model.pkl')
    joblib.dump(vectorizer, 'tfidf_vectorizer.pkl')

try:
    model = joblib.load('news_classifier_model.pkl')
    vectorizer = joblib.load('tfidf_vectorizer.pkl')
except:
    train_and_save_model()
    model = joblib.load('news_classifier_model.pkl')
    vectorizer = joblib.load('tfidf_vectorizer.pkl')

# Streamlit UI
st.title("Fake News Article Classifier")

user_input = st.text_area("Enter the news article text here:")

if st.button("Classify"):
    if user_input.strip() == "":
        st.warning("Please enter some text to classify.")
    else:
        processed_text = preprocess_text(user_input)
        vect_text = vectorizer.transform([processed_text])
        prediction = model.predict(vect_text)[0]
        st.success(f"The news article is classified as: **{prediction.upper()}**")